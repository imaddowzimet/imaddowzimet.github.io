artmapfull$year[artmapfull$year==17] <- "2011-2015"
p<- ggplot(artmapfull, aes(long, lat, group=group, fill=logfreq, frame=year)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
gganimate(p, "your_animation.gif", interval=.2)
library(animation)
gganimate(p, "your_animation.gif", interval=.2)
gganimate(p,  interval=.2)
gganimate(p, "mapanimation.html")
p<- ggplot(artmapfull, aes(long, lat, group=group, fill=logfreq, frame=year)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+
ggtitle("Permanent collection acquisitions by country of origin, 1931-2015")
gganimate(p, "mapanimation.html")
p<- ggplot(artmapfull, aes(long, lat, group=group, fill=logfreq, frame=year)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+
ggtitle("Permanent collection acquisitions by country of origin:")
gganimate(p, "mapanimation.html")
p<- ggplot(artmapfull, aes(long, lat, group=group, fill=logfreq, frame=year)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+
ggtitle("Permanent collection acquisitions by country of origin:", h=.5)
gganimate(p, "mapanimation.html")
p<- ggplot(artmapfull, aes(long, lat, group=group, fill=logfreq, frame=year)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+
ggtitle("Permanent collection acquisitions by country of origin:", hjust=.5)
gganimate(p, "mapanimation.html")
p<- ggplot(artmapfull, aes(long, lat, group=group, fill=logfreq, frame=year)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(), plot.title = element_text(hjust = 0.5))+
ggtitle("Permanent collection acquisitions by country of origin:")
gganimate(p, "mapanimation.html")
artmapfull <-artmaplist[[1]]
for (i in 2:17) {
artmapfull <- rbind(artmapfull,artmaplist[[i]] )
}
artmapfull$logfreq <- log(artmapfull$Freq)
artmapfull2<- artmapfull
artmapfull2$year<-artmapfull2$year+1
artmapfull2<- artmapfull
artmapfull2<- artmapfull
for (i in 1:17) {
artmapfull2$year[artmapfull$year==i]<-i+i
}
table(artmapfull2$year)
artmapfull2<- artmapfull
for (i in 1:17) {
artmapfull2$year[artmapfull2$year==i]<-i+i
}
for (i in 1:17) {
artmapfull$year[artmapfull$year==i]<-i+(i-1)
}
table(artmapfull$year)
table(artmapfull2$year)
artmapfull <-artmaplist[[1]]
for (i in 2:17) {
artmapfull <- rbind(artmapfull,artmaplist[[i]] )
}
artmapfull$logfreq <- log(artmapfull$Freq)
artmapfull2<- artmapfull
for (i in 1:17) {
artmapfull2$year[artmapfull2$year==i]<-i+i
}
for (i in 1:17) {
artmapfull$year[artmapfull$year==i]<-i+(i-1)
}
table(artmapfull$year)
artmapfull <-artmaplist[[1]]
for (i in 2:17) {
artmapfull <- rbind(artmapfull,artmaplist[[i]] )
}
table(artmapfull$year)
artmapfull$logfreq <- log(artmapfull$Freq)
artmapfull2<- artmapfull
table(artmapfull2$year)
for (i in 1:17) {
artmapfull2$year[artmapfull2$year==i]<-i+i
}
table(artmapfull2$year)
artmapfull <-artmaplist[[1]]
for (i in 2:17) {
artmapfull <- rbind(artmapfull,artmaplist[[i]] )
}
# Convert frequency into log frequency
artmapfull$logfreq <- log(artmapfull$Freq)
##
# Double artmapfull, renumber years
artmapfull2<- artmapfull
artmapfull1<- artmapfull
for (i in 1:17) {
artmapfull2$year[artmapfull$year==i]<-i+i
}
for (i in 1:17) {
artmapfull1$year[artmapfull$year==i]<-i+(i-1)
}
table(artmapfull2$year)
table(artmapfull1$year)
artmapgif<-rbind(artmapfull1,artmapfull2)
years <- c("1931-1935", "1936-1940", "1941-1945", "1946-1950",  "1951-1955", "1956-1960",  "1961-1965",  "1966-1970",
"1971-1975", "1976-1980","1981-1985", "1986-1990","1991-1995",  "1996-2000",  "2001-2005",  "2006-2010", "2011-2015")
rep(years, each=2)
years <- rep(years, each=2)
artmapgif$year <- factor(artmapgif$year, labels=years)
artmapfull <-artmaplist[[1]]
for (i in 2:17) {
artmapfull <- rbind(artmapfull,artmaplist[[i]] )
}
# Convert frequency into log frequency
artmapfull$logfreq <- log(artmapfull$Freq)
##
# Double artmapfull, renumber years
artmapfull2<- artmapfull
artmapfull1<- artmapfull
for (i in 1:17) {
artmapfull2$year[artmapfull$year==i]<-i+i
}
for (i in 1:17) {
artmapfull1$year[artmapfull$year==i]<-i+(i-1)
}
artmapgif<-rbind(artmapfull1,artmapfull2)
# List years
years <- c("1931-1935", "1936-1940", "1941-1945", "1946-1950",  "1951-1955", "1956-1960",  "1961-1965",  "1966-1970",
"1971-1975", "1976-1980","1981-1985", "1986-1990","1991-1995",  "1996-2000",  "2001-2005",  "2006-2010", "2011-2015")
years <- rep(years, each=2)
p<- ggplot(artmapgif, aes(long, lat, group=group, fill=logfreq, frame=year)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(), plot.title = element_blank())
gganimate(p)
?ggplot
years
years <- c("1931-1935", "1936-1940", "1941-1945", "1946-1950",  "1951-1955", "1956-1960",  "1961-1965",  "1966-1970",
"1971-1975", "1976-1980","1981-1985", "1986-1990","1991-1995",  "1996-2000",  "2001-2005",  "2006-2010", "2011-2015")
ggplot(artmapfull[artmapfull$year==1,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggplot(artmapfull[artmapfull$year==1,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+
ggtitle(paste("Permanent collection acquisitions by country of origin:", year[1]))
ggplot(artmapfull[artmapfull$year==1,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[1]))
ggplot(artmapfull[artmapfull$year==1,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[1]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggplot(artmapfull[artmapfull$year==1,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[1]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),plot.title = element_text(hjust = 0.5))
length(years)
saveGIF(
for (i in 1:length(years)){
ggplot(artmapfull[artmapfull$year==i,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[i]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),plot.title = element_text(hjust = 0.5))
}
)
library(animation)
ani.options(interval=.05)
saveGIF(
for (i in 1:length(years)){
ggplot(artmapfull[artmapfull$year==i,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[i]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),plot.title = element_text(hjust = 0.5))
}
)
library(animation)
ani.options(interval=.05, convert= "//opt//local//bin//convert")
saveGIF(
for (i in 1:length(years)){
ggplot(artmapfull[artmapfull$year==i,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[i]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),plot.title = element_text(hjust = 0.5))
}
)
library(animation)
ani.options(interval=.05, convert= "/opt/local/bin/convert")
saveGIF(
for (i in 1:length(years)){
ggplot(artmapfull[artmapfull$year==i,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[i]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),plot.title = element_text(hjust = 0.5))
}
)
?im.convert
library(animation)
ani.options(interval=.05, convert= '/opt/local/bin/convert')
saveGIF(
for (i in 1:length(years)){
ggplot(artmapfull[artmapfull$year==i,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[i]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),plot.title = element_text(hjust = 0.5))
}
)
ani.options(interval=.05, convert= '/opt/local/bin/convert')
library(animation)
ani.options(interval=.05)
saveGIF(
for (i in 1:length(years)){
g<-ggplot(artmapfull[artmapfull$year==i,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[i]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),plot.title = element_text(hjust = 0.5))
print(g)
}
)
source(rmd2md)
source(rmd2md.r)
#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_images)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
rmd2md()
rmd2md()
getwd()
rmd2md()
source("rmd2md.r")
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
setwd("~/Desktop/Experiments")
questionnaireA <- read.csv("Copy of QA DataMaster 170207 EP.csv"")
q
Q
)
)
""
questionnaireA <- read.csv("Copy of QA DataMaster 170207 EP.csv")
View(questionnaireA)
transposeQA <- t(questionnaireA)
View(tranposeQA)
View(transposeQA)
finalQA<- transposeQA[1:44,]
View(finalQA)
questionnaireA <- read.csv("Copy of QA DataMaster 170207 EP.csv")
transposeQA <- t(questionnaireA)
finalQA<- transposeQA[1:43,]
questionnaireB <- read.csv("Copy of QB DataMaster 170207 EP")
setwd("~/Desktop/Experiments")
questionnaireB <- read.csv("Copy of QB DataMaster 170207 EP")
questionnaireB <- read.csv("Copy of QB DataMaster 170207 EP.csv")
transposeQB <- t(questionnaireB)
View(transposeQB)
?join
library(plyr)
finalQB <- transposeQB[-7,]
View(finalQB)
MergedQAB <- cbind(finalQA, finalQB)
dim(finalQA)
dim(finalQB)
a <- rownames(transposeQB)
a
finalQB$facilityid <- rownames(transposeQB)
View(finalQB)
head(finalQB)
finalQB$facilityid <- as.numeric(rownames(transposeQB))
head(finalQB)
# Import Questionnaire A
questionnaireA <- read.csv("Copy of QA DataMaster 170207 EP.csv")
transposeQA <- t(questionnaireA)
finalQA<- transposeQA[1:43,]
# Import Questionnaire B
questionnaireB <- read.csv("Copy of QB DataMaster 170207 EP.csv")
transposeQB <- t(questionnaireB)
# drop facility 5, since it is not in questionnaire A
#finalQB <- transposeQB[-7,]
finalQB$facilityid <- as.numeric(rownames(transposeQB))
head(finalQB)
# Import Questionnaire A
questionnaireA <- read.csv("Copy of QA DataMaster 170207 EP.csv")
transposeQA <- t(questionnaireA)
finalQA<- transposeQA[1:43,]
# Import Questionnaire B
questionnaireB <- read.csv("Copy of QB DataMaster 170207 EP.csv")
transposeQB <- t(questionnaireB)
# drop facility 5, since it is not in questionnaire A
#finalQB <- transposeQB[-7,]
finalQB <- cbind(transposeQB,as.numeric(rownames(transposeQB)))
View(finalQB)
# Import Questionnaire A
questionnaireA <- read.csv("Copy of QA DataMaster 170207 EP.csv")
transposeQA <- t(questionnaireA)
finalQA<- transposeQA[1:43,]
# Import Questionnaire B
questionnaireB <- read.csv("Copy of QB DataMaster 170207 EP.csv")
transposeQB <- t(questionnaireB)
# drop facility 5, since it is not in questionnaire A
#finalQB <- transposeQB[-7,]
finalQB <- cbind(as.numeric(rownames(transposeQB), transposeQB))
View(finalQB)
# Import Questionnaire A
questionnaireA <- read.csv("Copy of QA DataMaster 170207 EP.csv")
transposeQA <- t(questionnaireA)
finalQA<- transposeQA[1:43,]
# Import Questionnaire B
questionnaireB <- read.csv("Copy of QB DataMaster 170207 EP.csv")
transposeQB <- t(questionnaireB)
finalQB <- cbind(as.numeric(rownames(transposeQB)), transposeQB)
View(finalQB)
head(finalQB)
# Import Questionnaire A
questionnaireA <- read.csv("Copy of QA DataMaster 170207 EP.csv")
transposeQA <- t(questionnaireA)
# drop facility 9, since it is not in QB
finalQA<- transposeQA[c(1:10,12:43),]
View(finalQA)
# Import Questionnaire A
questionnaireA <- read.csv("Copy of QA DataMaster 170207 EP.csv")
transposeQA <- t(questionnaireA)
# drop facility 9, since it is not in QB
finalQA<- transposeQA[c(1:9,11:43),]
View(finalQA)
# Import Questionnaire A
questionnaireA <- read.csv("Copy of QA DataMaster 170207 EP.csv")
transposeQA <- t(questionnaireA)
# drop facility 9, since it is not in QB
finalQA<- transposeQA[c(1:9,11:43),]
# Import Questionnaire B
questionnaireB <- read.csv("Copy of QB DataMaster 170207 EP.csv")
transposeQB <- t(questionnaireB)
#drop facility 5, since it is not in questionnaire A
finalQB <- transposeQB[-7,]
# Merge questionnaire A and B
MergedQAB <- cbind(finalQA, finalQB)
View(MergedQAB)
library(foreign)
class(mergedQAB)
class(MergedQAB)
MergedQAB <- as.data.frame(MergedQAB)
str(MergedQAB)
library(foreign)
?write.dta
write.dta(MergedQAB, MergedQAB.dta, convert.factors = "string")
write.dta(MergedQAB, "MergedQAB.dta", convert.factors = "string")
write.dta(MergedQAB, "MergedQAB.dta")
rmd2md()
