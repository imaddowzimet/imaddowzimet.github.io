# SET-UP
#######################
library(readr)
library(stringr)
library(gdata)
library(plyr)
library(maps)
library(maptools)
library(rgdal)
library(ggplot2)
library(broom)
library(gganimate)
library(RCurl)
library(anytime)
rm(list = ls())    # Remove objects from memory
gpclibPermit()     # This is a command that needs to be run to get rgdal to work properly (at least for me)
#######################
# Load data.  I have to use the Rcurl package here because R doesn't like HTTPS links
my.url<- getURL("https://media.githubusercontent.com/media/MuseumofModernArt/collection/master/Artworks.csv")
df <- read.csv(text=my.url)
# read in table of nationalities
# (this is just an excel file with country names in one column, and nationality names in the second)
my.url <- getURL("https://raw.githubusercontent.com/imaddowzimet/Misc/master/Nationalities%20Country%20Crosswalk.csv")
nationalities <- read.csv(text=my.url, header=FALSE)
# the code below creates a list of data frames, one for each nationality, which contain all the pieces of artists of that nationality
# (artists with dual or multiple nationalities will appear in multiple data frames, which is what we want for now.)
df$Nationality <- NA               # drop the nationality info that we are not using
numrows <- dim(nationalities)[1]   # count nationalities
mynationalitysubsets <- list()     # initialize list
for (i in 1:numrows) {             # for each nationality
# check the "artist bio" section, and if it has a nationality that matches the nationality list, select it for the dataset
mynationalitysubsets[[i]] <-
df[grep(paste0(nationalities$V2[i]," ","|",nationalities$V2[i],","),df$ArtistBio),]
if (nrow(mynationalitysubsets[[i]])>0) {     # if the dataset we just created is not empty
# then create a variable "nationality" with the corresponding nationality
mynationalitysubsets[[i]]$Nationality <- as.character(nationalities$V2[i])
}
}
# We now have a list of datasets; one for each nationality.
# Now we are going to append all of the datasets into one giant one
dfFinal <- mynationalitysubsets[[1]]   # assign first dataset to dfFinal
for (i in 2:numrows) {
dfFinal <- rbind(dfFinal,mynationalitysubsets[[i]] )  # append the rest
}
##Merge in country names
nationalities <- rename(nationalities, c("V2"="Nationality","V1"="Country" ))        # rename variables in nationality/country list
nationalities <- nationalities[!duplicated(nationalities$Nationality), ]             # remove duplicate nationalities
nationalities$Country[nationalities$Country=="Dominica"] <- "Dominican Republic"     # Fix an error in spreadsheet (oops!)
orig.length<- dim(dfFinal)                                                           # This will be used to make sure the join is working correctly
dfFinal <- join(dfFinal, nationalities, by='Nationality', type='left', match='all')  # Merge datasets
orig.length[1]== dim(dfFinal)[1]                                                     # Check we didn't lose any rows
dfFinal$Country<- as.factor(dfFinal$Country)      # change nationality to factor variable
# create a table of overall counts by nationality
mytable <- table(dfFinal$Country)                 # create table of counts
mytable
# convert from string to date format
dfFinal$DateAcquired <- anytime(dfFinal$DateAcquired)
# check % missing
length(dfFinal$DateAcquired[is.na(dfFinal$DateAcquired)])/length(dfFinal$DateAcquired)
# only 4% missing data which is nice- I'm OK with listwise deletion for now
# Create five year break variable
dfFinal$year <- format(dfFinal$DateAcquired, format="%Y")    # Create year variable
dfFinal <- dfFinal[dfFinal$year>=1930 & dfFinal$year<=2015,] # I'm going to exclude 1929 and 2016 to get nicer breakpoints
breaks <- seq(from=1930, to=2015, by=5)                      # create breaks
dfFinal$fiveyear <- cut(as.numeric(dfFinal$year), breaks)
subsets<-split(dfFinal, dfFinal$fiveyear, drop=TRUE)         # and break it into 17 seperate datasets -- one for each five year break
##################################################
# Create map
#################################################
# bring in world map
countries <- readShapePoly("//Users//isaacmaddowzimet//Desktop//Experiments//ne_110m_admin_0_countries//ne_110m_admin_0_countries.shp")
proj4string(countries) <- CRS("+proj=longlat")
winkel <- "+proj=wintri"
countries_winkel <- spTransform(countries, CRS(winkel))
par(mar=c(1,1,1,1))
# convert to dataframe (so ggplot can use it)
artmap <- tidy(countries_winkel, region="name_sort")
artmap <- rename(artmap, c("id"="Country"))        # rename variables in nationality/country list
dim(artmap)
# rename French Guiana, so that it doesn't show up as an extension of France
artmap$Country[artmap$group=="France.2"] <- "French Guiana"
# create counts
artmaplist <- list()
for (i in 1:17) {
data1 <- as.data.frame(table(subsets[[i]]$Country))
data1 <- rename(data1, c("Var1"="Country"))
artmaplist[[i]] <- join(artmap, data1, by='Country', type='left', match='all')  # Merge datasets
artmaplist[[i]]$year <- i
}
# Append these into one dataset
artmapfull <-artmaplist[[1]]
for (i in 2:17) {
artmapfull <- rbind(artmapfull,artmaplist[[i]] )
}
# Convert frequency into log frequency
artmapfull$logfreq <- log(artmapfull$Freq)
##
# Map the first year, to try it out
ggplot(artmapfull[artmapfull$year==1,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
artmapfull$year[artmapfull$year==1] <- "1931-1935"
artmapfull$year[artmapfull$year==2] <- "1936-1940"
artmapfull$year[artmapfull$year==3] <- "1941-1945"
artmapfull$year[artmapfull$year==4] <- "1946-1950"
artmapfull$year[artmapfull$year==5] <- "1951-1955"
artmapfull$year[artmapfull$year==6] <- "1956-1960"
artmapfull$year[artmapfull$year==7] <- "1961-1965"
artmapfull$year[artmapfull$year==8] <- "1966-1970"
artmapfull$year[artmapfull$year==9] <- "1971-1975"
artmapfull$year[artmapfull$year==10] <- "1976-1980"
artmapfull$year[artmapfull$year==11] <- "1981-1985"
artmapfull$year[artmapfull$year==12] <- "1986-1990"
artmapfull$year[artmapfull$year==13] <- "1991-1995"
artmapfull$year[artmapfull$year==14] <- "1996-2000"
artmapfull$year[artmapfull$year==15] <- "2001-2005"
artmapfull$year[artmapfull$year==16] <- "2006-2010"
artmapfull$year[artmapfull$year==17] <- "2011-2015"
p<- ggplot(artmapfull, aes(long, lat, group=group, fill=logfreq, frame=year)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
gganimate(p, "your_animation.gif", interval=.2)
library(animation)
gganimate(p, "your_animation.gif", interval=.2)
gganimate(p,  interval=.2)
gganimate(p, "mapanimation.html")
p<- ggplot(artmapfull, aes(long, lat, group=group, fill=logfreq, frame=year)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+
ggtitle("Permanent collection acquisitions by country of origin, 1931-2015")
gganimate(p, "mapanimation.html")
p<- ggplot(artmapfull, aes(long, lat, group=group, fill=logfreq, frame=year)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+
ggtitle("Permanent collection acquisitions by country of origin:")
gganimate(p, "mapanimation.html")
p<- ggplot(artmapfull, aes(long, lat, group=group, fill=logfreq, frame=year)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+
ggtitle("Permanent collection acquisitions by country of origin:", h=.5)
gganimate(p, "mapanimation.html")
p<- ggplot(artmapfull, aes(long, lat, group=group, fill=logfreq, frame=year)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+
ggtitle("Permanent collection acquisitions by country of origin:", hjust=.5)
gganimate(p, "mapanimation.html")
p<- ggplot(artmapfull, aes(long, lat, group=group, fill=logfreq, frame=year)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(), plot.title = element_text(hjust = 0.5))+
ggtitle("Permanent collection acquisitions by country of origin:")
gganimate(p, "mapanimation.html")
artmapfull <-artmaplist[[1]]
for (i in 2:17) {
artmapfull <- rbind(artmapfull,artmaplist[[i]] )
}
artmapfull$logfreq <- log(artmapfull$Freq)
artmapfull2<- artmapfull
artmapfull2$year<-artmapfull2$year+1
artmapfull2<- artmapfull
artmapfull2<- artmapfull
for (i in 1:17) {
artmapfull2$year[artmapfull$year==i]<-i+i
}
table(artmapfull2$year)
artmapfull2<- artmapfull
for (i in 1:17) {
artmapfull2$year[artmapfull2$year==i]<-i+i
}
for (i in 1:17) {
artmapfull$year[artmapfull$year==i]<-i+(i-1)
}
table(artmapfull$year)
table(artmapfull2$year)
artmapfull <-artmaplist[[1]]
for (i in 2:17) {
artmapfull <- rbind(artmapfull,artmaplist[[i]] )
}
artmapfull$logfreq <- log(artmapfull$Freq)
artmapfull2<- artmapfull
for (i in 1:17) {
artmapfull2$year[artmapfull2$year==i]<-i+i
}
for (i in 1:17) {
artmapfull$year[artmapfull$year==i]<-i+(i-1)
}
table(artmapfull$year)
artmapfull <-artmaplist[[1]]
for (i in 2:17) {
artmapfull <- rbind(artmapfull,artmaplist[[i]] )
}
table(artmapfull$year)
artmapfull$logfreq <- log(artmapfull$Freq)
artmapfull2<- artmapfull
table(artmapfull2$year)
for (i in 1:17) {
artmapfull2$year[artmapfull2$year==i]<-i+i
}
table(artmapfull2$year)
artmapfull <-artmaplist[[1]]
for (i in 2:17) {
artmapfull <- rbind(artmapfull,artmaplist[[i]] )
}
# Convert frequency into log frequency
artmapfull$logfreq <- log(artmapfull$Freq)
##
# Double artmapfull, renumber years
artmapfull2<- artmapfull
artmapfull1<- artmapfull
for (i in 1:17) {
artmapfull2$year[artmapfull$year==i]<-i+i
}
for (i in 1:17) {
artmapfull1$year[artmapfull$year==i]<-i+(i-1)
}
table(artmapfull2$year)
table(artmapfull1$year)
artmapgif<-rbind(artmapfull1,artmapfull2)
years <- c("1931-1935", "1936-1940", "1941-1945", "1946-1950",  "1951-1955", "1956-1960",  "1961-1965",  "1966-1970",
"1971-1975", "1976-1980","1981-1985", "1986-1990","1991-1995",  "1996-2000",  "2001-2005",  "2006-2010", "2011-2015")
rep(years, each=2)
years <- rep(years, each=2)
artmapgif$year <- factor(artmapgif$year, labels=years)
artmapfull <-artmaplist[[1]]
for (i in 2:17) {
artmapfull <- rbind(artmapfull,artmaplist[[i]] )
}
# Convert frequency into log frequency
artmapfull$logfreq <- log(artmapfull$Freq)
##
# Double artmapfull, renumber years
artmapfull2<- artmapfull
artmapfull1<- artmapfull
for (i in 1:17) {
artmapfull2$year[artmapfull$year==i]<-i+i
}
for (i in 1:17) {
artmapfull1$year[artmapfull$year==i]<-i+(i-1)
}
artmapgif<-rbind(artmapfull1,artmapfull2)
# List years
years <- c("1931-1935", "1936-1940", "1941-1945", "1946-1950",  "1951-1955", "1956-1960",  "1961-1965",  "1966-1970",
"1971-1975", "1976-1980","1981-1985", "1986-1990","1991-1995",  "1996-2000",  "2001-2005",  "2006-2010", "2011-2015")
years <- rep(years, each=2)
p<- ggplot(artmapgif, aes(long, lat, group=group, fill=logfreq, frame=year)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(), plot.title = element_blank())
gganimate(p)
?ggplot
years
years <- c("1931-1935", "1936-1940", "1941-1945", "1946-1950",  "1951-1955", "1956-1960",  "1961-1965",  "1966-1970",
"1971-1975", "1976-1980","1981-1985", "1986-1990","1991-1995",  "1996-2000",  "2001-2005",  "2006-2010", "2011-2015")
ggplot(artmapfull[artmapfull$year==1,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggplot(artmapfull[artmapfull$year==1,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+
ggtitle(paste("Permanent collection acquisitions by country of origin:", year[1]))
ggplot(artmapfull[artmapfull$year==1,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[1]))
ggplot(artmapfull[artmapfull$year==1,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[1]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
ggplot(artmapfull[artmapfull$year==1,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[1]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),plot.title = element_text(hjust = 0.5))
length(years)
saveGIF(
for (i in 1:length(years)){
ggplot(artmapfull[artmapfull$year==i,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[i]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),plot.title = element_text(hjust = 0.5))
}
)
library(animation)
ani.options(interval=.05)
saveGIF(
for (i in 1:length(years)){
ggplot(artmapfull[artmapfull$year==i,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[i]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),plot.title = element_text(hjust = 0.5))
}
)
library(animation)
ani.options(interval=.05, convert= "//opt//local//bin//convert")
saveGIF(
for (i in 1:length(years)){
ggplot(artmapfull[artmapfull$year==i,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[i]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),plot.title = element_text(hjust = 0.5))
}
)
library(animation)
ani.options(interval=.05, convert= "/opt/local/bin/convert")
saveGIF(
for (i in 1:length(years)){
ggplot(artmapfull[artmapfull$year==i,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[i]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),plot.title = element_text(hjust = 0.5))
}
)
?im.convert
library(animation)
ani.options(interval=.05, convert= '/opt/local/bin/convert')
saveGIF(
for (i in 1:length(years)){
ggplot(artmapfull[artmapfull$year==i,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[i]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),plot.title = element_text(hjust = 0.5))
}
)
ani.options(interval=.05, convert= '/opt/local/bin/convert')
library(animation)
ani.options(interval=.05)
saveGIF(
for (i in 1:length(years)){
g<-ggplot(artmapfull[artmapfull$year==i,], aes(long, lat, group=group, fill=logfreq)) +geom_polygon() +
coord_equal() + guides(fill=FALSE) + scale_fill_distiller(palette = "OrRd", direction= 1 ) +
ggtitle(paste("Permanent collection acquisitions by country of origin:", years[i]))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank(),plot.title = element_text(hjust = 0.5))
print(g)
}
)
source(rmd2md)
source(rmd2md.r)
#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f))
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
opts_knit$set(base.url = "/")
opts_chunk$set(fig.path = url_images)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
#opts_chunk$set(fig.width  = 8.5,
#               fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
rmd2md()
rmd2md()
rmd2md()
getwd()
rmd2md()
