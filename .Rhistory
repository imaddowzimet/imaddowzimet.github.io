library(tidyr)
library(gridExtra)
library(plotrix)
load("/Users/isaacmaddowzimet/imaddowzimet.github.io/CleanedMoMA.Rda")
regions       <- read.csv("/Users/isaacmaddowzimet/imaddowzimet.github.io/datamisc/ContinentCrosswalk.csv")
dfwithregions <- join(dfFinal, regions, by='Country', type='left')
orphans <- table(dfwithregions[is.na(dfwithregions$Region)          # Tabulate if region is missing
& !is.na(dfwithregions$Country),     # and country is not missing
c("Country")])
orphans[orphans>0]                                                  # show table (and suppress the empty cells)
dfwithregions$Region[dfwithregions$Country=="Holland "] <- "EUROPE"
dfwithregions$Subregion[dfwithregions$Country=="Holland "] <- "Western Europe"
regiontable             <- table(dfwithregions$Region) # Make table of frequencies
regiontabledf           <- as.data.frame(sort(regiontable, decreasing = T))          # convert to data frame
colnames(regiontabledf) <- c("Region", "Freq")
ggplot(data=regiontabledf,
aes(x=Region, y=Freq)) +
geom_bar(stat='identity', fill='indianred1') +
theme_bw()+
scale_y_continuous(name="Number of artworks", labels = comma)+
ggtitle("Number of artworks in MoMA permanent collection by nationality of artist, grouped by region")+
theme(plot.title = element_text(hjust = 0.5, size=10))
par(mfrow=c(5,4), mar=c(.2, .2, 1, .2), oma=c(1,2,2,0), family='serif')
# Data manipulation
dfwithregions$Region<- factor(dfwithregions$Region,
levels(dfwithregions$Region)[c(5, 3, 4, 2, 1, 6)])  # I set the order of countries manually this time (instead of sorting by frequency), because we want them to stay consistent across the graphs
# Split into datasets for each five year period
subsets<-split(dfwithregions, dfwithregions$fiveyear, drop=TRUE)
# Define Bridgette Riley color palette
riley <- c("#67C1EC", "#DE6736", "#7BBC53", "#FAB9AC", "#E6B90D",  "lightgrey" )
for (i in 1:17) {
regiontable             <- table(subsets[[i]]$Region)                                  # Make table of frequencies
log(regiontable)
barplot(regiontable, xaxt='n', ylim=c(0,13000), col=riley
, yaxt= if ((i+3)%%4!=0) 'n', yaxp=c(0, 12000, 3))                           # this is a bit tricky, but it's a way to make R only draw y axes for graphs in column 1. It does this with a bit of math - if the iteration we are on +3 is not evenly divisible by 4, we hide the y-axis)
title(paste(1925+(i*5), "-", 1930+(i*5), sep=""), line=-1.5)
axis(side=1, at=c(0, 7.5), labels=FALSE)  # the x-axis tick at 7.5 won't appear since it is out of range, but otherwise the line won't show up
}
# All this below is just to get the legend positioned correctly, particularly the horizontal spacing
# First line of legend
legendtexttop=c("North Am.", "Eur.", "LAC")
xcoords <- c(0, 4, 6.5)                                       # This determines the spacing between the legend items
secondvectortop <- (1:length(legendtexttop))-1                # But you need to scale them by the length of the text
textwidthstop <- xcoords/secondvectortop
textwidthstop[1] <- 0                                         # and set the first to 0
legend(10,10000, legendtexttop, fill=riley[1:3], xpd=NA,     # (xpd=NA lets us put the legend outside of the plot area, in the outer margins)
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
# Second line of legend
legendtextbottom=c("Asia", "Africa", "Oceania")
legend(10,6000, legendtextbottom, fill=riley[4:6], xpd=NA,     # xpd=NA lets us put the legend outside of the plot area, in the outer margins
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
# Title graph
title("Number of pieces acquired by region, 1930-2015", outer=TRUE, cex.main=2)
par(mfrow=c(5,4), mar=c(.2, .2, 1, .2), oma=c(1,2,2,0), family='serif')
for (i in 1:17) {
regiontable             <- prop.table(table(subsets[[i]]$Region))*100                          # Make table of proportions
log(regiontable)
barplot(regiontable, xaxt='n', ylim=c(0,100), col=riley
, yaxt= if ((i+3)%%4!=0) 'n', yaxp=c(0, 100, 2))                           # this is a bit tricky, but it's a way to make R only draw y axes for graphs in column 1. It does this with a bit of math - if the iteration we are on +3 is not evenly divisible by 4, we hide the y-axis)
title(paste(1925+(i*5), "-", 1930+(i*5), sep=""), line=-1.5)
axis(side=1, at=c(0, 7.5), labels=FALSE)  # the x-axis tick at 7.5 won't appear since it is out of range, but otherwise the line won't show up
}
# Add legend (we've already specified many of the values needed in the last code chunk)
legend(10,60, legendtexttop, fill=riley[1:3], xpd=NA,
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
legend(10,40, legendtextbottom, fill=riley[4:6], xpd=NA,
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
# Title graph
title("Percent of pieces acquired by region, 1930-2015", outer=TRUE, cex.main=2)
par(mfrow=c(5,4), mar=c(.2, .2, 1, .2), oma=c(1,2,2,0), family='serif')
for (i in 1:17) {
regiontable             <- table(subsets[[i]]$Region)                                # Make table of frequencies
log(regiontable)
barplot(log(regiontable), xaxt='n', ylim=c(0,12), col=riley
, yaxt= if ((i+3)%%4!=0) 'n', yaxp=c(0, 10, 2))                                               # this is a bit tricky, but it's a way to make R only draw y axes for graphs in column 1. It does this with a bit of math - if the iteration we are on +3 is not evenly divisible by 4, we hide the y-axis)
title(paste(1925+(i*5), "-", 1930+(i*5), sep=""), line=-1.5)
axis(side=1, at=c(0, 7.5), labels=FALSE)  # the tick at 7.5 won't appear since it is out of range, but otherwise the line won't show up
}
# Add legend (we've already specified many of the values needed in the last code chunk)
legend(10,8, legendtexttop, fill=riley[1:3], xpd=NA,
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
legend(10,6, legendtextbottom, fill=riley[4:6], xpd=NA,
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
# Title graph
title("Number of pieces acquired by region (natural log), 1930-2015", outer=TRUE, cex.main=2)
par(family='serif', oma=c(0,0,0,2))
# In order to make a stacked area chart, we need to put the logged frequencies into a matrix
stackedmatrix <- matrix(NA, 17,6)            # With 17 rows (for each five year period), and 6 columns (for each region)
for (i in 1:17) {
stackedmatrix[i,]             <- log(table(subsets[[i]]$Region))
}
# One little fix:
stackedmatrix[stackedmatrix=="-Inf"] <- 0   # When we log 0s, they become undefined, so we need to set them back to 0.
# create x axis labels
xaxislabels <- seq(from=1935, to=2015, by=5)
# Chart!
stackpoly(stackedmatrix, stack=TRUE, xaxlab=xaxislabels, ylim=c(0,40), col=riley, axis4=FALSE)
# Title!
title("Number of pieces acquired by region (natural log), 1930-2015")
# Legend!
legend(3.5,-2, legendtexttop, fill=riley[1:3], xpd=NA,
horiz=TRUE, cex=1, text.width = textwidthstop, bty='n')
legend(3.5,-3, legendtextbottom, fill=riley[4:6], xpd=NA,
horiz=TRUE, cex=1, text.width = textwidthstop, bty='n')
par(family='serif', oma=c(0,0,0,2))
# Scale matrix
stackedmatrixscaled  <- t(apply(stackedmatrix, 1, function(x)((10/sum(x))*x)))
# Chart!
stackpoly(stackedmatrixscaled, stack=TRUE, xaxlab=xaxislabels, ylim=c(0,10), col=riley, axis4=FALSE)
# Title!
title("Distribution of pieces acquired by region (natural log), 1930-2015")
# Legend!
legend(3.5,0, legendtexttop, fill=riley[1:3], xpd=NA,
horiz=TRUE, cex=1, text.width = textwidthstop, bty='n')
legend(3.5,-1, legendtextbottom, fill=riley[4:6], xpd=NA,
horiz=TRUE, cex=1, text.width = textwidthstop, bty='n')
knitr::opts_chunk$set(echo = TRUE)
########################
# SET-UP
#######################
library(plyr)
library(ggplot2)
library(scales)
library(tidyr)
library(gridExtra)
library(plotrix)
load("/Users/isaacmaddowzimet/imaddowzimet.github.io/CleanedMoMA.Rda")
regions       <- read.csv("/Users/isaacmaddowzimet/imaddowzimet.github.io/datamisc/ContinentCrosswalk.csv")
dfwithregions <- join(dfFinal, regions, by='Country', type='left')
orphans <- table(dfwithregions[is.na(dfwithregions$Region)          # Tabulate if region is missing
& !is.na(dfwithregions$Country),     # and country is not missing
c("Country")])
orphans[orphans>0]                                                  # show table (and suppress the empty cells)
dfwithregions$Region[dfwithregions$Country=="Holland "] <- "EUROPE"
dfwithregions$Subregion[dfwithregions$Country=="Holland "] <- "Western Europe"
regiontable             <- table(dfwithregions$Region) # Make table of frequencies
regiontabledf           <- as.data.frame(sort(regiontable, decreasing = T))          # convert to data frame
colnames(regiontabledf) <- c("Region", "Freq")
ggplot(data=regiontabledf,
aes(x=Region, y=Freq)) +
geom_bar(stat='identity', fill='indianred1') +
theme_bw()+
scale_y_continuous(name="Number of artworks", labels = comma)+
ggtitle("Number of artworks in MoMA permanent collection by nationality of artist, grouped by region")+
theme(plot.title = element_text(hjust = 0.5, size=10))
par(mfrow=c(5,4), mar=c(.2, .2, 1, .2), oma=c(1,2,2,0), family='serif')
# Data manipulation
dfwithregions$Region<- factor(dfwithregions$Region,
levels(dfwithregions$Region)[c(5, 3, 4, 2, 1, 6)])  # I set the order of countries manually this time (instead of sorting by frequency), because we want them to stay consistent across the graphs
# Split into datasets for each five year period
subsets<-split(dfwithregions, dfwithregions$fiveyear, drop=TRUE)
# Define Bridgette Riley color palette
riley <- c("#67C1EC", "#DE6736", "#7BBC53", "#FAB9AC", "#E6B90D",  "lightgrey" )
for (i in 1:17) {
regiontable             <- table(subsets[[i]]$Region)                                  # Make table of frequencies
log(regiontable)
barplot(regiontable, xaxt='n', ylim=c(0,13000), col=riley
, yaxt= if ((i+3)%%4!=0) 'n', yaxp=c(0, 12000, 3))                           # this is a bit tricky, but it's a way to make R only draw y axes for graphs in column 1. It does this with a bit of math - if the iteration we are on +3 is not evenly divisible by 4, we hide the y-axis)
title(paste(1925+(i*5), "-", 1930+(i*5), sep=""), line=-1.5)
axis(side=1, at=c(0, 7.5), labels=FALSE)  # the x-axis tick at 7.5 won't appear since it is out of range, but otherwise the line won't show up
}
# All this below is just to get the legend positioned correctly, particularly the horizontal spacing
# First line of legend
legendtexttop=c("North Am.", "Eur.", "LAC")
xcoords <- c(0, 4, 6.5)                                       # This determines the spacing between the legend items
secondvectortop <- (1:length(legendtexttop))-1                # But you need to scale them by the length of the text
textwidthstop <- xcoords/secondvectortop
textwidthstop[1] <- 0                                         # and set the first to 0
legend(10,10000, legendtexttop, fill=riley[1:3], xpd=NA,     # (xpd=NA lets us put the legend outside of the plot area, in the outer margins)
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
# Second line of legend
legendtextbottom=c("Asia", "Africa", "Oceania")
legend(10,6000, legendtextbottom, fill=riley[4:6], xpd=NA,     # xpd=NA lets us put the legend outside of the plot area, in the outer margins
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
# Title graph
title("Number of pieces acquired by region, 1930-2015", outer=TRUE, cex.main=2)
par(mfrow=c(5,4), mar=c(.2, .2, 1, .2), oma=c(1,2,2,0), family='serif')
for (i in 1:17) {
regiontable             <- prop.table(table(subsets[[i]]$Region))*100                          # Make table of proportions
log(regiontable)
barplot(regiontable, xaxt='n', ylim=c(0,100), col=riley
, yaxt= if ((i+3)%%4!=0) 'n', yaxp=c(0, 100, 2))                           # this is a bit tricky, but it's a way to make R only draw y axes for graphs in column 1. It does this with a bit of math - if the iteration we are on +3 is not evenly divisible by 4, we hide the y-axis)
title(paste(1925+(i*5), "-", 1930+(i*5), sep=""), line=-1.5)
axis(side=1, at=c(0, 7.5), labels=FALSE)  # the x-axis tick at 7.5 won't appear since it is out of range, but otherwise the line won't show up
}
# Add legend (we've already specified many of the values needed in the last code chunk)
legend(10,60, legendtexttop, fill=riley[1:3], xpd=NA,
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
legend(10,40, legendtextbottom, fill=riley[4:6], xpd=NA,
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
# Title graph
title("Percent of pieces acquired by region, 1930-2015", outer=TRUE, cex.main=2)
par(mfrow=c(5,4), mar=c(.2, .2, 1, .2), oma=c(1,2,2,0), family='serif')
for (i in 1:17) {
regiontable             <- table(subsets[[i]]$Region)                                # Make table of frequencies
log(regiontable)
barplot(log(regiontable), xaxt='n', ylim=c(0,12), col=riley
, yaxt= if ((i+3)%%4!=0) 'n', yaxp=c(0, 10, 2))                                               # this is a bit tricky, but it's a way to make R only draw y axes for graphs in column 1. It does this with a bit of math - if the iteration we are on +3 is not evenly divisible by 4, we hide the y-axis)
title(paste(1925+(i*5), "-", 1930+(i*5), sep=""), line=-1.5)
axis(side=1, at=c(0, 7.5), labels=FALSE)  # the tick at 7.5 won't appear since it is out of range, but otherwise the line won't show up
}
# Add legend (we've already specified many of the values needed in the last code chunk)
legend(10,8, legendtexttop, fill=riley[1:3], xpd=NA,
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
legend(10,6, legendtextbottom, fill=riley[4:6], xpd=NA,
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
# Title graph
title("Number of pieces acquired by region (natural log), 1930-2015", outer=TRUE, cex.main=2)
par(family='serif', oma=c(0,0,0,2))
# In order to make a stacked area chart, we need to put the logged frequencies into a matrix
stackedmatrix <- matrix(NA, 17,6)            # With 17 rows (for each five year period), and 6 columns (for each region)
for (i in 1:17) {
stackedmatrix[i,]             <- log(table(subsets[[i]]$Region))
}
# One little fix:
stackedmatrix[stackedmatrix=="-Inf"] <- 0   # When we log 0s, they become undefined, so we need to set them back to 0.
# create x axis labels
xaxislabels <- seq(from=1935, to=2015, by=5)
# Chart!
stackpoly(stackedmatrix, stack=TRUE, xaxlab=xaxislabels, ylim=c(0,40), col=riley, axis4=FALSE)
# Title!
title("Number of pieces acquired by region (natural log), 1930-2015")
# Legend!
legend(3.5,-2, legendtexttop, fill=riley[1:3], xpd=NA,
horiz=TRUE, cex=1, text.width = textwidthstop, bty='n')
legend(3.5,-3, legendtextbottom, fill=riley[4:6], xpd=NA,
horiz=TRUE, cex=1, text.width = textwidthstop, bty='n')
par(family='serif', oma=c(0,0,0,2))
# Scale matrix
stackedmatrixscaled  <- t(apply(stackedmatrix, 1, function(x)((10/sum(x))*x)))
# Chart!
stackpoly(stackedmatrixscaled, stack=TRUE, xaxlab=xaxislabels, ylim=c(0,10), col=riley, axis4=FALSE)
# Title!
title("Distribution of pieces acquired by region (natural log), 1930-2015")
# Legend!
legend(3.5,-0.5, legendtexttop, fill=riley[1:3], xpd=NA,
horiz=TRUE, cex=1, text.width = textwidthstop, bty='n')
legend(3.5,-1, legendtextbottom, fill=riley[4:6], xpd=NA,
horiz=TRUE, cex=1, text.width = textwidthstop, bty='n')
knitr::opts_chunk$set(echo = TRUE)
########################
# SET-UP
#######################
library(plyr)
library(ggplot2)
library(scales)
library(tidyr)
library(gridExtra)
library(plotrix)
load("/Users/isaacmaddowzimet/imaddowzimet.github.io/CleanedMoMA.Rda")
regions       <- read.csv("/Users/isaacmaddowzimet/imaddowzimet.github.io/datamisc/ContinentCrosswalk.csv")
dfwithregions <- join(dfFinal, regions, by='Country', type='left')
orphans <- table(dfwithregions[is.na(dfwithregions$Region)          # Tabulate if region is missing
& !is.na(dfwithregions$Country),     # and country is not missing
c("Country")])
orphans[orphans>0]                                                  # show table (and suppress the empty cells)
dfwithregions$Region[dfwithregions$Country=="Holland "] <- "EUROPE"
dfwithregions$Subregion[dfwithregions$Country=="Holland "] <- "Western Europe"
regiontable             <- table(dfwithregions$Region) # Make table of frequencies
regiontabledf           <- as.data.frame(sort(regiontable, decreasing = T))          # convert to data frame
colnames(regiontabledf) <- c("Region", "Freq")
ggplot(data=regiontabledf,
aes(x=Region, y=Freq)) +
geom_bar(stat='identity', fill='indianred1') +
theme_bw()+
scale_y_continuous(name="Number of artworks", labels = comma)+
ggtitle("Number of artworks in MoMA permanent collection by nationality of artist, grouped by region")+
theme(plot.title = element_text(hjust = 0.5, size=10))
par(mfrow=c(5,4), mar=c(.2, .2, 1, .2), oma=c(1,2,2,0), family='serif')
# Data manipulation
dfwithregions$Region<- factor(dfwithregions$Region,
levels(dfwithregions$Region)[c(5, 3, 4, 2, 1, 6)])  # I set the order of countries manually this time (instead of sorting by frequency), because we want them to stay consistent across the graphs
# Split into datasets for each five year period
subsets<-split(dfwithregions, dfwithregions$fiveyear, drop=TRUE)
# Define Bridgette Riley color palette
riley <- c("#67C1EC", "#DE6736", "#7BBC53", "#FAB9AC", "#E6B90D",  "lightgrey" )
for (i in 1:17) {
regiontable             <- table(subsets[[i]]$Region)                                  # Make table of frequencies
log(regiontable)
barplot(regiontable, xaxt='n', ylim=c(0,13000), col=riley
, yaxt= if ((i+3)%%4!=0) 'n', yaxp=c(0, 12000, 3))                           # this is a bit tricky, but it's a way to make R only draw y axes for graphs in column 1. It does this with a bit of math - if the iteration we are on +3 is not evenly divisible by 4, we hide the y-axis)
title(paste(1925+(i*5), "-", 1930+(i*5), sep=""), line=-1.5)
axis(side=1, at=c(0, 7.5), labels=FALSE)  # the x-axis tick at 7.5 won't appear since it is out of range, but otherwise the line won't show up
}
# All this below is just to get the legend positioned correctly, particularly the horizontal spacing
# First line of legend
legendtexttop=c("North Am.", "Eur.", "LAC")
xcoords <- c(0, 4, 6.5)                                       # This determines the spacing between the legend items
secondvectortop <- (1:length(legendtexttop))-1                # But you need to scale them by the length of the text
textwidthstop <- xcoords/secondvectortop
textwidthstop[1] <- 0                                         # and set the first to 0
legend(10,10000, legendtexttop, fill=riley[1:3], xpd=NA,     # (xpd=NA lets us put the legend outside of the plot area, in the outer margins)
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
# Second line of legend
legendtextbottom=c("Asia", "Africa", "Oceania")
legend(10,6000, legendtextbottom, fill=riley[4:6], xpd=NA,     # xpd=NA lets us put the legend outside of the plot area, in the outer margins
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
# Title graph
title("Number of pieces acquired by region, 1930-2015", outer=TRUE, cex.main=2)
par(mfrow=c(5,4), mar=c(.2, .2, 1, .2), oma=c(1,2,2,0), family='serif')
for (i in 1:17) {
regiontable             <- prop.table(table(subsets[[i]]$Region))*100                          # Make table of proportions
log(regiontable)
barplot(regiontable, xaxt='n', ylim=c(0,100), col=riley
, yaxt= if ((i+3)%%4!=0) 'n', yaxp=c(0, 100, 2))                           # this is a bit tricky, but it's a way to make R only draw y axes for graphs in column 1. It does this with a bit of math - if the iteration we are on +3 is not evenly divisible by 4, we hide the y-axis)
title(paste(1925+(i*5), "-", 1930+(i*5), sep=""), line=-1.5)
axis(side=1, at=c(0, 7.5), labels=FALSE)  # the x-axis tick at 7.5 won't appear since it is out of range, but otherwise the line won't show up
}
# Add legend (we've already specified many of the values needed in the last code chunk)
legend(10,60, legendtexttop, fill=riley[1:3], xpd=NA,
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
legend(10,40, legendtextbottom, fill=riley[4:6], xpd=NA,
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
# Title graph
title("Percent of pieces acquired by region, 1930-2015", outer=TRUE, cex.main=2)
par(mfrow=c(5,4), mar=c(.2, .2, 1, .2), oma=c(1,2,2,0), family='serif')
for (i in 1:17) {
regiontable             <- table(subsets[[i]]$Region)                                # Make table of frequencies
log(regiontable)
barplot(log(regiontable), xaxt='n', ylim=c(0,12), col=riley
, yaxt= if ((i+3)%%4!=0) 'n', yaxp=c(0, 10, 2))                                               # this is a bit tricky, but it's a way to make R only draw y axes for graphs in column 1. It does this with a bit of math - if the iteration we are on +3 is not evenly divisible by 4, we hide the y-axis)
title(paste(1925+(i*5), "-", 1930+(i*5), sep=""), line=-1.5)
axis(side=1, at=c(0, 7.5), labels=FALSE)  # the tick at 7.5 won't appear since it is out of range, but otherwise the line won't show up
}
# Add legend (we've already specified many of the values needed in the last code chunk)
legend(10,8, legendtexttop, fill=riley[1:3], xpd=NA,
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
legend(10,6, legendtextbottom, fill=riley[4:6], xpd=NA,
horiz=TRUE, cex=2.2, text.width = textwidthstop, bty='n')
# Title graph
title("Number of pieces acquired by region (natural log), 1930-2015", outer=TRUE, cex.main=2)
par(family='serif', oma=c(0,0,0,2))
# In order to make a stacked area chart, we need to put the logged frequencies into a matrix
stackedmatrix <- matrix(NA, 17,6)            # With 17 rows (for each five year period), and 6 columns (for each region)
for (i in 1:17) {
stackedmatrix[i,]             <- log(table(subsets[[i]]$Region))
}
# One little fix:
stackedmatrix[stackedmatrix=="-Inf"] <- 0   # When we log 0s, they become undefined, so we need to set them back to 0.
# create x axis labels
xaxislabels <- seq(from=1935, to=2015, by=5)
# Chart!
stackpoly(stackedmatrix, stack=TRUE, xaxlab=xaxislabels, ylim=c(0,40), col=riley, axis4=FALSE)
# Title!
title("Number of pieces acquired by region (natural log), 1930-2015")
# Legend!
legend(3.5,-2, legendtexttop, fill=riley[1:3], xpd=NA,
horiz=TRUE, cex=1, text.width = textwidthstop, bty='n')
legend(3.5,-3, legendtextbottom, fill=riley[4:6], xpd=NA,
horiz=TRUE, cex=1, text.width = textwidthstop, bty='n')
par(family='serif', oma=c(0,0,0,2))
# Scale matrix
stackedmatrixscaled  <- t(apply(stackedmatrix, 1, function(x)((10/sum(x))*x)))
# Chart!
stackpoly(stackedmatrixscaled, stack=TRUE, xaxlab=xaxislabels, ylim=c(0,10), col=riley, axis4=FALSE)
# Title!
title("Distribution of pieces acquired by region (natural log), 1930-2015")
# Legend!
legend(3.5,-0.6, legendtexttop, fill=riley[1:3], xpd=NA,
horiz=TRUE, cex=1, text.width = textwidthstop, bty='n')
legend(3.5,-1, legendtextbottom, fill=riley[4:6], xpd=NA,
horiz=TRUE, cex=1, text.width = textwidthstop, bty='n')
subsets
for (i in 1:17) {}
for (i in 1:17) { print(table(subsets[[i]]$Region))}
for (i in 1:17) { print(log(table(subsets[[i]]$Region))}
for (i in 1:17) { print(log(table(subsets[[i]]$Region)))}
log(7444+         7582+          787+          474  +        102 +          12 )
(7444+         7582+          787+          474  +        102 +          12 )
for (i in 1:17) { print(sum(table(subsets[[i]]$Region)))}
source(rmd2md.r)
source("rmd2md.r")
rmd2md()
rmd2md()
install.packages("fiftystater")
# detailed here. https://cran.r-project.org/web/packages/fiftystater/vignettes/fiftystater.html
rm(list=ls())
library(ggplot2)
library(fiftystater)
data("fifty_states")
library(haven)
setwd("~/Desktop/Teen Preg State Map")
install.packages("haven")
library(haven)
TeenPreg <-read_dta("teenpregratesfinal2013.dta")
str(TeenPreg)
# This way of creating maps including Hawaii and Alaska was adapted from "http://flowingdata.com/2015/09/01/how-to-make-maps-in-r-that-include-alaska-and-hawaii/"
# I should actually change this to a continous scale (after archiving this version). I can use ggplot if I use the package
# detailed here. https://cran.r-project.org/web/packages/fiftystater/vignettes/fiftystater.html
rm(list=ls())
library(ggplot2)
library(fiftystater)
library(haven)
data("fifty_states")
TeenPreg <-read_dta("teenpregratesfinal2013.dta")
# map_id creates the aesthetic mapping to the state name column in your data
p <- ggplot(TeenPreg, aes(map_id = state)) +
# map points to the fifty_states shape data
geom_map(aes(fill = pregrate201315to19), map = fifty_states) +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
p
install.packages("mapproj")
p
TeenPreg$pregrate201315to19
class(TeenPreg)
# This way of creating maps including Hawaii and Alaska was adapted from "http://flowingdata.com/2015/09/01/how-to-make-maps-in-r-that-include-alaska-and-hawaii/"
# I should actually change this to a continous scale (after archiving this version). I can use ggplot if I use the package
# detailed here. https://cran.r-project.org/web/packages/fiftystater/vignettes/fiftystater.html
rm(list=ls())
library(ggplot2)
library(fiftystater)
library(haven)
data("fifty_states")
TeenPreg <-read_dta("teenpregratesfinal2013.dta")
TeenPreg <- TeenPreg[TeenPreg$state!="us" & TeenPreg$state!="dc"]
# map_id creates the aesthetic mapping to the state name column in your data
p <- ggplot(TeenPreg, aes(map_id = state)) +
# map points to the fifty_states shape data
geom_map(aes(fill = pregrate201315to19), map = fifty_states) +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
p
dim(TeenPreg)
TeenPreg <-read_dta("teenpregratesfinal2013.dta")
dim(TeenPreg)
TeenPreg <- TeenPreg[TeenPreg$state!="us" & TeenPreg$state!="dc",]
dim(TeenPreg)
p <- ggplot(TeenPreg, aes(map_id = state)) +
# map points to the fifty_states shape data
geom_map(aes(fill = pregrate201315to19), map = fifty_states) +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
p
seq_len(nrow(data) - 1)
data
seq_len(nrow(TeenPreg) - 1)
# This way of creating maps including Hawaii and Alaska was adapted from "http://flowingdata.com/2015/09/01/how-to-make-maps-in-r-that-include-alaska-and-hawaii/"
# I should actually change this to a continous scale (after archiving this version). I can use ggplot if I use the package
# detailed here. https://cran.r-project.org/web/packages/fiftystater/vignettes/fiftystater.html
rm(list=ls())
library(ggplot2)
library(fiftystater)
library(haven)
data("fifty_states")
TeenPreg <-read_dta("teenpregratesfinal2013.dta")
TeenPreg <- TeenPreg[TeenPreg$state!="us",]
# map_id creates the aesthetic mapping to the state name column in your data
p <- ggplot(TeenPreg, aes(map_id = state)) +
# map points to the fifty_states shape data
geom_map(aes(fill = pregrate201315to19), map = fifty_states) +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
p
View(fifty_states)
p <- ggplot(TeenPreg, aes(map_id = state)) +
# map points to the fifty_states shape data
geom_map( map = fifty_states) +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
p
str(fifty_states)
TeenPreg$STATE
TeenPreg$STATE <- tolower(TeenPreg$STATE)
warnings()
p <- ggplot(TeenPreg, aes(map_id = STATE)) +
# map points to the fifty_states shape data
geom_map(aes(fill = pregrate201315to19), map = fifty_states) +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank())
p
p <- ggplot(TeenPreg, aes(map_id = STATE)) +
# map points to the fifty_states shape data
geom_map(aes(fill = pregrate201315to19), map = fifty_states) +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
coord_map() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
theme(legend.position = "bottom",
panel.background = element_blank()) + scale_fill_distiller(palette = "OrRd", direction= 1 )
p
